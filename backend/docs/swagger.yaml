basePath: /api
definitions:
  httpErrors.ErrResponse:
    properties:
      msg:
        description: application-level error message, for debugging
        example: not found user
        type: string
      status:
        description: http response status code
        example: 404
        type: integer
      statusText:
        description: user-level status message
        example: not_found
        type: string
    type: object
  presenter.ClientCreate:
    properties:
      current_resolution:
        example: D
        type: string
      current_ticker:
        example: TCB
        type: string
    type: object
  presenter.ClientResponse:
    properties:
      created_at:
        type: string
      current_resolution:
        example: D
        type: string
      current_ticker:
        example: TCB
        type: string
      id:
        type: integer
      owner_id:
        type: integer
      updated_at:
        type: string
    type: object
  presenter.ClientUpdate:
    properties:
      current_resolution:
        example: D
        type: string
      current_ticker:
        example: TCB
        type: string
    type: object
  presenter.ForgotPassword:
    properties:
      email:
        example: hiennguyen9874@gmail.com
        type: string
    required:
    - email
    type: object
  presenter.PublicKey:
    properties:
      public_key_access_token:
        type: string
      public_key_refresh_token:
        type: string
    type: object
  presenter.ResetPassword:
    properties:
      confirm_password:
        example: password
        minLength: 8
        type: string
      new_password:
        example: password
        minLength: 8
        type: string
    required:
    - confirm_password
    - new_password
    type: object
  presenter.TickerResponse:
    properties:
      exchange:
        type: string
      full_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      short_name:
        type: string
      symbol:
        type: string
      type:
        type: string
    type: object
  presenter.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  presenter.UserCreate:
    properties:
      confirm_password:
        example: password
        minLength: 8
        type: string
      email:
        example: hiennguyen9874@gmail.com
        type: string
      name:
        example: Xuan Hien
        type: string
      password:
        example: password
        minLength: 8
        type: string
    required:
    - confirm_password
    - email
    - name
    - password
    type: object
  presenter.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_superuser:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
    type: object
  presenter.UserUpdate:
    properties:
      name:
        example: Xuan Hien
        type: string
    type: object
  presenter.UserUpdatePassword:
    properties:
      confirm_password:
        example: password
        minLength: 8
        type: string
      new_password:
        example: password
        minLength: 8
        type: string
      old_password:
        example: old_password
        minLength: 8
        type: string
    required:
    - confirm_password
    - new_password
    - old_password
    type: object
  responses.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/httpErrors.ErrResponse'
      is_success:
        example: false
        type: boolean
    type: object
  responses.SuccessResponse-array_presenter_ClientResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/presenter.ClientResponse'
        type: array
      is_success:
        example: true
        type: boolean
    type: object
  responses.SuccessResponse-array_presenter_TickerResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/presenter.TickerResponse'
        type: array
      is_success:
        example: true
        type: boolean
    type: object
  responses.SuccessResponse-array_presenter_UserResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/presenter.UserResponse'
        type: array
      is_success:
        example: true
        type: boolean
    type: object
  responses.SuccessResponse-presenter_ClientResponse:
    properties:
      data:
        $ref: '#/definitions/presenter.ClientResponse'
      is_success:
        example: true
        type: boolean
    type: object
  responses.SuccessResponse-presenter_TickerResponse:
    properties:
      data:
        $ref: '#/definitions/presenter.TickerResponse'
      is_success:
        example: true
        type: boolean
    type: object
  responses.SuccessResponse-presenter_UserResponse:
    properties:
      data:
        $ref: '#/definitions/presenter.UserResponse'
      is_success:
        example: true
        type: boolean
    type: object
info:
  contact: {}
  title: Stockk Go
  version: "1.0"
paths:
  /auth/forgotpassword:
    post:
      consumes:
      - application/json
      description: Forgot password, code will send to email.
      parameters:
      - description: Forgot Password
        in: body
        name: forgotPassword
        required: true
        schema:
          $ref: '#/definitions/presenter.ForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - multipart/form-data
      description: Sign in, get access token for future requests.
      parameters:
      - description: email
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Sign In
      tags:
      - auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logout, remove current refresh token in db.
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Logout
      tags:
      - auth
  /auth/logoutall:
    get:
      consumes:
      - application/json
      description: Logout all session of this user.
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Logout all session
      tags:
      - auth
  /auth/publickey:
    get:
      consumes:
      - application/json
      description: Get rsa public key to decode token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.PublicKey'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get public key
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: Get new access token from refresh token.
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/resetpassword:
    patch:
      consumes:
      - application/json
      description: Reset Password, using code from email.
      parameters:
      - description: code
        format: code
        in: query
        name: code
        required: true
        type: string
      - description: Reset Password
        in: body
        name: resetPassword
        required: true
        schema:
          $ref: '#/definitions/presenter.ResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Reset Password
      tags:
      - auth
  /auth/verifyemail:
    get:
      consumes:
      - application/json
      description: Verify user using code from email.
      parameters:
      - description: offset
        format: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Verify user
      tags:
      - auth
  /client:
    get:
      consumes:
      - application/json
      description: Retrieve clients.
      parameters:
      - description: limit
        format: limit
        in: query
        name: limit
        type: integer
      - description: offset
        format: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-array_presenter_ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Read Clients
      tags:
      - clients
    post:
      consumes:
      - application/json
      description: Create new client.
      parameters:
      - description: Add client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/presenter.ClientCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Create Client
      tags:
      - clients
  /client/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an client by ID.
      parameters:
      - description: Client Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Delete client
      tags:
      - clients
    get:
      consumes:
      - application/json
      description: Get client by ID.
      parameters:
      - description: Client Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Read client
      tags:
      - clients
    put:
      consumes:
      - application/json
      description: Update an client by ID.
      parameters:
      - description: Client Id
        in: path
        name: id
        required: true
        type: string
      - description: Update client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/presenter.ClientUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Update client
      tags:
      - clients
  /ticker:
    get:
      consumes:
      - application/json
      description: Retrieve tickers.
      parameters:
      - description: limit
        format: limit
        in: query
        name: limit
        type: integer
      - description: offset
        format: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-array_presenter_TickerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Read tickers
      tags:
      - tickers
  /ticker/{symbol}:
    get:
      consumes:
      - application/json
      description: Get ticker by symbol.
      parameters:
      - description: Ticker symbol
        in: path
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_TickerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Read ticker
      tags:
      - tickers
    put:
      consumes:
      - application/json
      description: Update an ticker by Symbol.
      parameters:
      - description: Ticker symbol
        in: path
        name: symbol
        required: true
        type: string
      - description: is_active
        format: is_active
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_TickerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Update ticker
      tags:
      - tickers
  /user:
    get:
      consumes:
      - application/json
      description: Retrieve users.
      parameters:
      - description: limit
        format: limit
        in: query
        name: limit
        type: integer
      - description: offset
        format: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-array_presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Read Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create new user.
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Create User
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an user by ID.
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID.
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Read user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an user by ID.
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Update user
      tags:
      - users
  /user/{id}/logoutall:
    get:
      consumes:
      - application/json
      description: Logout all session of user with id.
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Logout all of user
      tags:
      - users
  /user/{id}/updatepass:
    patch:
      consumes:
      - application/json
      description: Update password user by ID.
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserUpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Update password user
      tags:
      - users
  /user/me:
    get:
      consumes:
      - application/json
      description: Get user me.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Read user me
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user me.
      parameters:
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Update user me
      tags:
      - users
  /user/me/updatepass:
    patch:
      consumes:
      - application/json
      description: Update password user me.
      parameters:
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserUpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse-presenter_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Update password user me
      tags:
      - users
securityDefinitions:
  OAuth2Password:
    flow: password
    tokenUrl: /api/auth/login
    type: oauth2
swagger: "2.0"
